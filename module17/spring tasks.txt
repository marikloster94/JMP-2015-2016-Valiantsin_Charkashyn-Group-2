1. Создать конфигурационные файлы:
 - Для repositorу классов
 - Для service классов
 - Для data initializers классов
2. Создать корневой (основной) конфигурационный файл, подключить файлы из п1.
3. Реализовать bean definitions для repository классов.
  - Использовать аннотацию @Repository
  - Для создания UserRepository использовать класс org.shop.repository.factory.UserRepositoryFactory и соответствующий factory method
  - Для создания OrderRepository необходимо передать параметр intitialSequence, значение которого должно быть взято из property файла.
4. Реализовать bean definitions для service классов:
  - Для OrderService: использовать аннотацию @Resource
  - ItemService: передать необходимые параметры через конструктор
  - SellerService: использовать autowiring by type
  - ProductService: использовать autowiring by constructor
  - UserService: использовать метод populate
  - ProposalService: передать repository через конструктор, а остальные остальные параметры передать через соответствующий setter-метод
5. Реализовать bean definitions для data initializer классов
  - Создать bean типа Map
	ID = 1, Value = org.shop.common.Sellers.AMAZON
	ID = 2, Value = org.shop.common.Sellers.SAMSUNG
	ID = 3, Value = ‘Apple’
  - SellerInitializer: использовать параметр типа Map<sellerId, sellerName> из предыдущего пункта
  - ProposalInitializer: использовать autowiring by name
  - ProductInitializer: передать параметры в конструктор
  - DataInitializer: инициализировать при помощи init метода
6. Добавить alias для UserService в корневом конфигурационном файле
7. Реализовать метод main для ShopLauncher класса
  - Создать и инициализировать ApplicationContext
  - Получить bean по имени
  - Получить bean по типу
  - Получить bean по имени и типу
  - Получить bean по alias
  - Проверить работоспособность 
